<?php

/**
 * Моки для классов базы данных в тестах
 * Используют тестовые константы БД вместо основных
 */

/**
 * Тестовый адаптер для базы данных
 */
class DatabaseTestAdapter
{
    /**
     * @var PDO
     */
    private static $pdo = null;
    private static $queries = [];
    private static $transactionActive = false;

    public static function clearQueries()
    {
        self::$queries = [];
    }

    public static function logQuery($query, $vars = [])
    {
        self::$queries[] = [
            "query" => $query,
            "vars" => $vars,
            "timestamp" => microtime(true),
        ];
    }

    public static function getQueries()
    {
        return self::$queries;
    }

    public static function getConnection()
    {
        return MyDB::get();
    }
    public static function query($query, $vars = [])
    {
        // Используем основной класс MyDB из проекта
        return MyDB::query($query, $vars);
    }

    /**
     * Создание тестовых таблиц
     */
    private static function createTestTables()
    {
        $tables = [
            "game" => "
                CREATE TABLE IF NOT EXISTS game (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT NOT NULL,
                    map_w INTEGER DEFAULT 100,
                    map_h INTEGER DEFAULT 100,
                    turn_type TEXT DEFAULT 'byturn',
                    turn_num INTEGER DEFAULT 1,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            ",
            "user" => "
                CREATE TABLE IF NOT EXISTS user (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    login TEXT NOT NULL,
                    color TEXT NOT NULL,
                    game INTEGER NOT NULL,
                    turn_order INTEGER DEFAULT 1,
                    turn_status TEXT DEFAULT 'wait',
                    money INTEGER DEFAULT 50,
                    age INTEGER DEFAULT 1,
                    income INTEGER DEFAULT 0,
                    research_amount INTEGER DEFAULT 0,
                    research_percent INTEGER DEFAULT 0,
                    process_research_complete INTEGER DEFAULT 0,
                    process_research_turns INTEGER DEFAULT 0,
                    process_research_type INTEGER DEFAULT 0,
                    pass TEXT DEFAULT '',
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (game) REFERENCES game(id)
                )
            ",
            "cell" => "
                CREATE TABLE IF NOT EXISTS cell (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    x INTEGER NOT NULL,
                    y INTEGER NOT NULL,
                    planet INTEGER NOT NULL,
                    type TEXT DEFAULT 'plains',
                    owner INTEGER DEFAULT NULL,
                    owner_culture INTEGER DEFAULT 0,
                    road INTEGER DEFAULT 0,
                    FOREIGN KEY (owner) REFERENCES user(id),
                    FOREIGN KEY (planet) REFERENCES game(id)
                )
            ",
            "unit_type" => "
                CREATE TABLE IF NOT EXISTS unit_type (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT NOT NULL,
                    points INTEGER DEFAULT 2
                )
            ",
            "unit" => "
                CREATE TABLE IF NOT EXISTS unit (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    x INTEGER NOT NULL,
                    y INTEGER NOT NULL,
                    planet INTEGER NOT NULL,
                    user_id INTEGER NOT NULL,
                    type INTEGER DEFAULT 1,
                    health INTEGER DEFAULT 3,
                    points INTEGER DEFAULT 2,
                    FOREIGN KEY (user_id) REFERENCES user(id),
                    FOREIGN KEY (planet) REFERENCES game(id)
                )
            ",
            "city" => "
                CREATE TABLE IF NOT EXISTS city (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    title TEXT NOT NULL,
                    x INTEGER NOT NULL,
                    y INTEGER NOT NULL,
                    user_id INTEGER NOT NULL,
                    planet INTEGER NOT NULL,
                    population INTEGER DEFAULT 1,
                    pmoney INTEGER DEFAULT 0,
                    presearch INTEGER DEFAULT 0,
                    resource_group INTEGER DEFAULT NULL,
                    FOREIGN KEY (user_id) REFERENCES user(id),
                    FOREIGN KEY (planet) REFERENCES game(id)
                )
            ",
            "resource_group" => "
                CREATE TABLE IF NOT EXISTS resource_group (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    group_id INTEGER NOT NULL,
                    user_id INTEGER NOT NULL,
                    resource_id INTEGER NOT NULL,
                    FOREIGN KEY (user_id) REFERENCES user(id)
                )
            ",
            "research" => "
                CREATE TABLE IF NOT EXISTS research (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    type INTEGER NOT NULL,
                    user_id INTEGER NOT NULL,
                    completed_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES user(id)
                )
            ",
            "message" => "
                CREATE TABLE IF NOT EXISTS message (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    from_id INTEGER DEFAULT NULL,
                    to_id INTEGER NOT NULL,
                    text TEXT NOT NULL,
                    type TEXT DEFAULT 'user',
                    date DATETIME DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (from_id) REFERENCES user(id),
                    FOREIGN KEY (to_id) REFERENCES user(id)
                )
            ",
            "event" => "
                CREATE TABLE IF NOT EXISTS event (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    type TEXT NOT NULL,
                    user_id INTEGER NOT NULL,
                    object TEXT DEFAULT NULL,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES user(id)
                )
            ",
        ];

        foreach ($tables as $tableName => $sql) {
            MyDB::query($sql);
        }
    }

    /**
     * Статический метод для создания таблиц в переданном PDO соединении
     */
    public static function createTestTablesStatic()
    {
        $tables = [
            "game" => "
                CREATE TABLE IF NOT EXISTS game (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT NOT NULL,
                    map_w INTEGER DEFAULT 100,
                    map_h INTEGER DEFAULT 100,
                    turn_type TEXT DEFAULT 'byturn',
                    turn_num INTEGER DEFAULT 1,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            ",
            "user" => "
                CREATE TABLE IF NOT EXISTS user (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    login TEXT NOT NULL,
                    color TEXT NOT NULL,
                    game INTEGER NOT NULL,
                    turn_order INTEGER DEFAULT 1,
                    turn_status TEXT DEFAULT 'wait',
                    money INTEGER DEFAULT 50,
                    age INTEGER DEFAULT 1,
                    income INTEGER DEFAULT 0,
                    research_amount INTEGER DEFAULT 0,
                    research_percent INTEGER DEFAULT 0,
                    process_research_complete INTEGER DEFAULT 0,
                    process_research_turns INTEGER DEFAULT 0,
                    process_research_type INTEGER DEFAULT 0,
                    pass TEXT DEFAULT '',
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            ",
            "cell" => "
                CREATE TABLE IF NOT EXISTS cell (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    x INTEGER NOT NULL,
                    y INTEGER NOT NULL,
                    planet INTEGER NOT NULL,
                    type TEXT DEFAULT 'plains',
                    owner INTEGER DEFAULT NULL,
                    owner_culture INTEGER DEFAULT 0,
                    road INTEGER DEFAULT 0
                )
            ",
            "unit_type" => "
                CREATE TABLE IF NOT EXISTS unit_type (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT NOT NULL,
                    points INTEGER DEFAULT 2
                )
            ",
            "unit" => "
                CREATE TABLE IF NOT EXISTS unit (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    x INTEGER NOT NULL,
                    y INTEGER NOT NULL,
                    planet INTEGER NOT NULL,
                    user_id INTEGER NOT NULL,
                    type INTEGER DEFAULT 1,
                    health INTEGER DEFAULT 3,
                    points INTEGER DEFAULT 2
                )
            ",
            "city" => "
                CREATE TABLE IF NOT EXISTS city (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    title TEXT NOT NULL,
                    x INTEGER NOT NULL,
                    y INTEGER NOT NULL,
                    user_id INTEGER NOT NULL,
                    planet INTEGER NOT NULL,
                    population INTEGER DEFAULT 1,
                    pmoney INTEGER DEFAULT 0,
                    presearch INTEGER DEFAULT 0,
                    resource_group INTEGER DEFAULT NULL
                )
            ",
            "resource_group" => "
                CREATE TABLE IF NOT EXISTS resource_group (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    group_id INTEGER NOT NULL,
                    user_id INTEGER NOT NULL,
                    resource_id INTEGER NOT NULL
                )
            ",
            "research" => "
                CREATE TABLE IF NOT EXISTS research (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    type INTEGER NOT NULL,
                    user_id INTEGER NOT NULL,
                    completed_at DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            ",
            "message" => "
                CREATE TABLE IF NOT EXISTS message (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    from_id INTEGER DEFAULT NULL,
                    to_id INTEGER NOT NULL,
                    text TEXT NOT NULL,
                    type TEXT DEFAULT 'user',
                    date DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            ",
            "event" => "
                CREATE TABLE IF NOT EXISTS event (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    type TEXT NOT NULL,
                    user_id INTEGER NOT NULL,
                    object TEXT DEFAULT NULL,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            ",
        ];

        foreach ($tables as $tableName => $sql) {
            MyDB::query($sql);
        }
    }

    /**
     * Очистка всех таблиц
     */
    public static function clearAllTables()
    {
        $pdo = MyDB::get();
        $tables = [
            "event",
            "message",
            "research",
            "resource_group",
            "city",
            "unit",
            "unit_type",
            "cell",
            "user",
            "game",
        ];

        foreach ($tables as $table) {
            $pdo->exec("DELETE FROM {$table}");
        }
    }

    /**
     * Сброс автоинкрементов
     */
    public static function resetAutoIncrements()
    {
        $pdo = MyDB::get();
        $pdo->exec("DELETE FROM sqlite_sequence");
    }

    /**
     * Полная очистка тестовой БД
     */
    public static function resetTestDatabase()
    {
        self::clearAllTables();
        self::resetAutoIncrements();
        self::clearQueries();

        // Очистка кэшей моков
        if (class_exists("GameTestMock")) {
            GameTestMock::$_all = [];
        }
        if (class_exists("UserTestMock")) {
            UserTestMock::$_all = [];
        }
    }
}

/**
 * Мок-обертка для замены MyDB в тестах
 * Теперь делегирует вызовы непосредственно к MyDB, который работает с SQLite в тестах
 */
class MyDBTestWrapper
{
    public static $dbhost = "";
    public static $dbuser = "";
    public static $dbpass = "";
    public static $dbname = "";
    public static $dbport = "";

    public static function resetTestDatabase()
    {
        DatabaseTestAdapter::resetTestDatabase();
    }

    public static function clearQueries()
    {
        DatabaseTestAdapter::clearQueries();
    }

    public static function getQueries()
    {
        return DatabaseTestAdapter::getQueries();
    }
}

/**
 * Мок класса Game для тестов
 */
class GameTestMock
{
    public $id;
    public $name;
    public $map_w;
    public $map_h;
    public $turn_type;
    public $turn_num;
    public $users = [];

    public static $_all = [];

    public function __construct($data)
    {
        foreach (
            ["name", "map_w", "map_h", "turn_type", "turn_num"]
            as $field
        ) {
            if (isset($data[$field])) {
                $this->$field = $data[$field];
            }
        }

        $this->users = [];
        if (isset($data["id"])) {
            $this->id = $data["id"];
            self::$_all[$this->id] = $this;

            $users = DatabaseTestAdapter::query(
                "SELECT id FROM user WHERE game = :gameid",
                ["gameid" => $this->id],
            );
            foreach ($users as $user) {
                $this->users[$user["id"]] = User::get($user["id"]);
            }
        }
    }

    public static function get($id)
    {
        if (isset(self::$_all[$id])) {
            return self::$_all[$id];
        }

        $data = DatabaseTestAdapter::query(
            "SELECT * FROM game WHERE id = :id",
            ["id" => $id],
            "row",
        );
        if ($data) {
            return new self($data);
        }
        return null;
    }

    public function save()
    {
        $values = [];
        foreach (
            ["name", "map_w", "map_h", "turn_type", "turn_num"]
            as $field
        ) {
            if (isset($this->$field)) {
                $values[$field] = $this->$field;
            }
        }

        if ($this->id) {
            DatabaseTestAdapter::update("game", $values, $this->id);
        } else {
            $this->id = DatabaseTestAdapter::insert("game", $values);
            self::$_all[$this->id] = $this;
        }
    }

    public function create_new_game()
    {
        // Упрощенная версия для тестов - просто создаем базовые юниты
        $users = DatabaseTestAdapter::query(
            "SELECT id FROM user WHERE game = :gameid ORDER BY turn_order",
            ["gameid" => $this->id],
        );

        foreach ($users as $user) {
            $unitData = [
                "x" => rand(0, $this->map_w - 1),
                "y" => rand(0, $this->map_h - 1),
                "planet" => $this->id,
                "user_id" => $user["id"],
                "type" => 1,
                "health" => 3,
                "points" => 2,
            ];
            DatabaseTestAdapter::insert("unit", $unitData);
        }

        return true;
    }

    public static function game_list()
    {
        return DatabaseTestAdapter::query("SELECT game.*, count(user.id) as ucount FROM game
                               INNER JOIN user ON user.game = game.id
                               GROUP BY user.game ORDER BY id DESC");
    }

    public function calculate()
    {
        // Mock implementation for tests
        return true;
    }

    public function all_system_message($text)
    {
        // Mock implementation for tests
        return true;
    }
}

/**
 * Мок класса User для тестов
 */
class UserTestMock
{
    public $id;
    public $login;
    public $color;
    public $game;
    public $turn_order;
    public $turn_status;
    public $money;
    public $age;
    public $income = 0;
    public $research_amount = 0;
    public $research_percent = 0;
    public $process_research_complete = 0;
    public $process_research_turns = 0;
    public $process_research_type = 0;

    public static $_all = [];

    public function __construct($data)
    {
        foreach (
            [
                "login",
                "color",
                "game",
                "turn_order",
                "turn_status",
                "money",
                "age",
                "income",
                "research_amount",
                "research_percent",
                "process_research_complete",
                "process_research_turns",
                "process_research_type",
            ]
            as $field
        ) {
            if (isset($data[$field])) {
                $this->$field = $data[$field];
            }
        }

        if (isset($data["id"])) {
            $this->id = $data["id"];
            self::$_all[$this->id] = $this;
        }
    }

    public static function get($id)
    {
        if (isset(self::$_all[$id])) {
            return self::$_all[$id];
        }

        $data = DatabaseTestAdapter::query(
            "SELECT * FROM user WHERE id = :id",
            ["id" => $id],
            "row",
        );
        if ($data) {
            return new self($data);
        }
        return null;
    }

    public function save()
    {
        $values = [];
        foreach (
            [
                "login",
                "color",
                "game",
                "turn_order",
                "turn_status",
                "money",
                "age",
                "income",
                "research_amount",
                "research_percent",
                "process_research_complete",
                "process_research_turns",
                "process_research_type",
            ]
            as $field
        ) {
            if (isset($this->$field)) {
                $values[$field] = $this->$field;
            }
        }

        if ($this->id) {
            DatabaseTestAdapter::update("user", $values, $this->id);
        } else {
            $this->id = DatabaseTestAdapter::insert("user", $values);
            self::$_all[$this->id] = $this;
        }
    }
}

/**
 * Функция для инициализации тестового окружения
 */
function initializeTestEnvironment()
{
    // Устанавливаем глобальные переменные для использования тестовых классов
    global $TESTING_MODE;
    $TESTING_MODE = true;
}

/**
 * Функция для получения тестового экземпляра Game
 */
function getTestGameClass($data = [])
{
    return new GameTestMock($data);
}

/**
 * Функция для получения тестового экземпляра User
 */
function getTestUserClass($data = [])
{
    return new UserTestMock($data);
}
