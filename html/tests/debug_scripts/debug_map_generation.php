<?php

/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã
 */

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã
require_once dirname(__DIR__) . "/config.php";
require_once dirname(__DIR__) . "/vendor/autoload.php";

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
MyDB::setDBConfig("localhost", "civ_test", "civ_test", "3306", "civ_for_tests");



// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
require_once dirname(__DIR__) . "/tests/TestGameDataInitializer.php";
TestGameDataInitializer::initializeAll();

echo "=== –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã ===\n";

try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∏–≥—Ä—É
    $gameData = [
        "name" => "Map Generation Test",
        "map_w" => 50,
        "map_h" => 50,
        "turn_type" => "byturn",
        "turn_num" => 1,
    ];

    $gameId = MyDB::insert("game", $gameData);
    echo "‚úì –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∏–≥—Ä–∞ ID: $gameId\n";

    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–µ—Ç—É
    $planetData = [
        "name" => "Test Planet",
        "game_id" => $gameId,
    ];

    $planetId = MyDB::insert("planet", $planetData);
    echo "‚úì –°–æ–∑–¥–∞–Ω–∞ –ø–ª–∞–Ω–µ—Ç–∞ ID: $planetId\n";

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–∞—Ä—Ç—ã
    Cell::$map_width = 50;
    Cell::$map_height = 50;

    echo "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É 50x50...\n";

    // –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è
    $startTime = microtime(true);
    $startMemory = memory_get_usage();

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
    Cell::generate_map($planetId, $gameId);

    $endTime = microtime(true);
    $endMemory = memory_get_usage();

    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    $executionTime = round($endTime - $startTime, 2);
    $memoryUsed = round(($endMemory - $startMemory) / 1024 / 1024, 2);

    echo "‚úì –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {$executionTime} —Å–µ–∫\n";
    echo "‚úì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–∞–º—è—Ç–∏: {$memoryUsed} MB\n";

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    $cellCount = MyDB::query(
        "SELECT COUNT(*) FROM cell WHERE planet = :planet",
        ["planet" => $planetId],
        "elem",
    );
    $resourceCount = MyDB::query(
        "SELECT COUNT(*) FROM resource WHERE planet = :planet",
        ["planet" => $planetId],
        "elem",
    );

    $expectedCells = 50 * 50; // 2500

    echo "‚úì –°–æ–∑–¥–∞–Ω–æ –∫–ª–µ—Ç–æ–∫: $cellCount (–æ–∂–∏–¥–∞–ª–æ—Å—å: $expectedCells)\n";
    echo "‚úì –°–æ–∑–¥–∞–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤: $resourceCount\n";

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
    if ($cellCount == $expectedCells) {
        echo "‚úì –£–°–ü–ï–•: –í—Å–µ –∫–ª–µ—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n";
    } else {
        echo "‚ùå –û–®–ò–ë–ö–ê: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—Ç–æ–∫\n";
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Ç–∏–ø–æ–≤ –∫–ª–µ—Ç–æ–∫
    $cellTypes = MyDB::query(
        "SELECT type, COUNT(*) as count FROM cell WHERE planet = :planet GROUP BY type",
        ["planet" => $planetId],
    );
    echo "\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∫–ª–µ—Ç–æ–∫:\n";
    foreach ($cellTypes as $typeInfo) {
        $percentage = round(($typeInfo["count"] / $cellCount) * 100, 1);
        echo "  {$typeInfo["type"]}: {$typeInfo["count"]} ({$percentage}%)\n";
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã —Ä–µ—Å—É—Ä—Å–æ–≤
    if ($resourceCount > 0) {
        $resourceTypes = MyDB::query(
            "SELECT type, COUNT(*) as count FROM resource WHERE planet = :planet GROUP BY type",
            ["planet" => $planetId],
        );
        echo "\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —Ä–µ—Å—É—Ä—Å–æ–≤:\n";
        foreach ($resourceTypes as $typeInfo) {
            $percentage = round(($typeInfo["count"] / $resourceCount) * 100, 1);
            echo "  –¢–∏–ø {$typeInfo["type"]}: {$typeInfo["count"]} ({$percentage}%)\n";
        }
    }

    // –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –±–æ–ª—å—à–æ–π –∫–∞—Ä—Ç–æ–π
    echo "\n=== –¢–µ—Å—Ç –±–æ–ª—å—à–æ–π –∫–∞—Ä—Ç—ã 100x100 ===\n";

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É –¥–ª—è –±–æ–ª—å—à–æ–π –∫–∞—Ä—Ç—ã
    $bigGameData = [
        "name" => "Big Map Generation Test",
        "map_w" => 100,
        "map_h" => 100,
        "turn_type" => "byturn",
        "turn_num" => 1,
    ];

    $bigGameId = MyDB::insert("game", $bigGameData);
    $bigPlanetData = [
        "name" => "Big Test Planet",
        "game_id" => $bigGameId,
    ];

    $bigPlanetId = MyDB::insert("planet", $bigPlanetData);

    Cell::$map_width = 100;
    Cell::$map_height = 100;

    echo "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É 100x100...\n";

    $startTime = microtime(true);
    $startMemory = memory_get_usage();

    Cell::generate_map($bigPlanetId, $bigGameId);

    $endTime = microtime(true);
    $endMemory = memory_get_usage();

    $executionTime = round($endTime - $startTime, 2);
    $memoryUsed = round(($endMemory - $startMemory) / 1024 / 1024, 2);

    echo "‚úì –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–æ–ª—å—à–æ–π –∫–∞—Ä—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {$executionTime} —Å–µ–∫\n";
    echo "‚úì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–∞–º—è—Ç–∏: {$memoryUsed} MB\n";

    $bigCellCount = MyDB::query(
        "SELECT COUNT(*) FROM cell WHERE planet = :planet",
        ["planet" => $bigPlanetId],
        "elem",
    );
    $expectedBigCells = 100 * 100; // 10000

    echo "‚úì –°–æ–∑–¥–∞–Ω–æ –∫–ª–µ—Ç–æ–∫: $bigCellCount (–æ–∂–∏–¥–∞–ª–æ—Å—å: $expectedBigCells)\n";

    if ($executionTime < 30) {
        echo "‚úÖ –û–¢–õ–ò–ß–ù–ê–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ –º–µ–Ω–µ–µ 30 —Å–µ–∫—É–Ω–¥\n";
    } elseif ($executionTime < 60) {
        echo "‚úÖ –•–û–†–û–®–ê–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ –º–µ–Ω–µ–µ –º–∏–Ω—É—Ç—ã\n";
    } else {
        echo "‚ö†Ô∏è  –ú–ï–î–õ–ï–ù–ù–û: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ –±–æ–ª–µ–µ –º–∏–Ω—É—Ç—ã\n";
    }

    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    echo "\n–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...\n";
    MyDB::query("DELETE FROM resource WHERE planet IN (:p1, :p2)", [
        "p1" => $planetId,
        "p2" => $bigPlanetId,
    ]);
    MyDB::query("DELETE FROM cell WHERE planet IN (:p1, :p2)", [
        "p1" => $planetId,
        "p2" => $bigPlanetId,
    ]);
    MyDB::query("DELETE FROM planet WHERE id IN (:p1, :p2)", [
        "p1" => $planetId,
        "p2" => $bigPlanetId,
    ]);
    MyDB::query("DELETE FROM game WHERE id IN (:g1, :g2)", [
        "g1" => $gameId,
        "g2" => $bigGameId,
    ]);

    echo "‚úì –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã\n";
    echo "\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!\n";
} catch (Exception $e) {
    echo "‚ùå –û–®–ò–ë–ö–ê: " . $e->getMessage() . "\n";
    echo "–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:\n" . $e->getTraceAsString() . "\n";
}

?>
