<?php

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PHPUnit
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
 */

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
if (php_sapi_name() !== 'cli') {
    die("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏\n");
}

echo "üîß PHPUnit Installation Helper\n";
echo "==============================\n\n";

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏
$testsDir = __DIR__;
$projectDir = dirname(__DIR__);
$phpunitPhar = $testsDir . DIRECTORY_SEPARATOR . 'phpunit.phar';

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
 */
function checkRequirements()
{
    echo "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π:\n";

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ PHP
    $phpVersion = PHP_VERSION;
    echo "   PHP –≤–µ—Ä—Å–∏—è: {$phpVersion} ";
    if (version_compare($phpVersion, '7.3.0', '>=')) {
        echo "‚úÖ\n";
    } else {
        echo "‚ùå (—Ç—Ä–µ–±—É–µ—Ç—Å—è PHP 7.3+)\n";
        return false;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
    $requiredExtensions = ['pdo', 'json', 'mbstring', 'xml', 'dom'];
    foreach ($requiredExtensions as $ext) {
        echo "   –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ {$ext}: ";
        if (extension_loaded($ext)) {
            echo "‚úÖ\n";
        } else {
            echo "‚ùå\n";
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ curl/openssl –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    echo "   cURL: ";
    if (extension_loaded('curl')) {
        echo "‚úÖ\n";
    } else {
        echo "‚ùå\n";
    }

    echo "\n";
    return true;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Composer
 */
function checkComposer()
{
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Composer:\n";

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º composer –≤ PATH
    $output = [];
    $returnCode = 0;
    exec('composer --version 2>&1', $output, $returnCode);

    if ($returnCode === 0) {
        echo "   ‚úÖ Composer –Ω–∞–π–¥–µ–Ω: " . implode(' ', $output) . "\n";
        return true;
    } else {
        echo "   ‚ùå Composer –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH\n";

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º composer.phar –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if (file_exists('composer.phar')) {
            echo "   ‚úÖ composer.phar –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏\n";
            return 'phar';
        }

        return false;
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫ PHPUnit
 */
function checkExistingPHPUnit($projectDir, $phpunitPhar)
{
    echo "üîç –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫ PHPUnit:\n";

    $found = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º vendor/bin/phpunit
    $vendorPhpunit = $projectDir . DIRECTORY_SEPARATOR . 'vendor' . DIRECTORY_SEPARATOR . 'bin' . DIRECTORY_SEPARATOR . 'phpunit';
    if (file_exists($vendorPhpunit) || file_exists($vendorPhpunit . '.bat')) {
        $found[] = 'composer';
        echo "   ‚úÖ –ù–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ Composer: {$vendorPhpunit}\n";
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º phpunit.phar
    if (file_exists($phpunitPhar)) {
        $found[] = 'phar';
        echo "   ‚úÖ –ù–∞–π–¥–µ–Ω PHAR —Ñ–∞–π–ª: {$phpunitPhar}\n";
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É
    $output = [];
    $returnCode = 0;
    exec('phpunit --version 2>&1', $output, $returnCode);
    if ($returnCode === 0) {
        $found[] = 'global';
        echo "   ‚úÖ –ù–∞–π–¥–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ: " . implode(' ', $output) . "\n";
    }

    if (empty($found)) {
        echo "   ‚ùå PHPUnit –Ω–µ –Ω–∞–π–¥–µ–Ω\n";
    }

    echo "\n";
    return $found;
}

/**
 * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PHPUnit —á–µ—Ä–µ–∑ Composer
 */
function installViaComposer($projectDir, $composerType = true)
{
    echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PHPUnit —á–µ—Ä–µ–∑ Composer:\n";

    $composerCmd = ($composerType === 'phar') ? 'php composer.phar' : 'composer';

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
    $oldDir = getcwd();
    chdir($projectDir);

    try {
        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º composer.json
        $composerJson = 'composer.json';
        $config = [];

        if (file_exists($composerJson)) {
            $config = json_decode(file_get_contents($composerJson), true);
            if (!$config) {
                echo "   ‚ö†Ô∏è  composer.json –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π\n";
                $config = [];
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º PHPUnit –≤ require-dev
        if (!isset($config['require-dev'])) {
            $config['require-dev'] = [];
        }

        if (!isset($config['require-dev']['phpunit/phpunit'])) {
            $config['require-dev']['phpunit/phpunit'] = '^9.0';
            echo "   üìù –î–æ–±–∞–≤–ª—è–µ–º PHPUnit –≤ composer.json\n";
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if (!isset($config['name'])) {
            $config['name'] = 'local/game-project';
        }
        if (!isset($config['type'])) {
            $config['type'] = 'project';
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º composer.json
        file_put_contents($composerJson, json_encode($config, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES));

        // –ó–∞–ø—É—Å–∫–∞–µ–º composer install
        echo "   üîÑ –ó–∞–ø—É—Å–∫ composer install --dev\n";
        $output = [];
        $returnCode = 0;
        exec("{$composerCmd} install --dev --no-interaction 2>&1", $output, $returnCode);

        if ($returnCode === 0) {
            echo "   ‚úÖ PHPUnit —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ Composer\n";
            echo "   üìç –ü—É—Ç—å: vendor/bin/phpunit\n";
            return true;
        } else {
            echo "   ‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–µ—Ä–µ–∑ Composer:\n";
            foreach ($output as $line) {
                echo "      {$line}\n";
            }
            return false;
        }
    } catch (Exception $e) {
        echo "   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: " . $e->getMessage() . "\n";
        return false;
    } finally {
        chdir($oldDir);
    }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ PHPUnit PHAR —Ñ–∞–π–ª–∞
 */
function downloadPHPUnitPhar($phpunitPhar)
{
    echo "üì• –ó–∞–≥—Ä—É–∑–∫–∞ PHPUnit PHAR:\n";

    $url = 'https://phar.phpunit.de/phpunit-9.phar';
    echo "   üåê URL: {$url}\n";
    echo "   üìÅ –ü—É—Ç—å: {$phpunitPhar}\n";

    // –ú–µ—Ç–æ–¥ 1: file_get_contents —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    $context = stream_context_create([
        'http' => [
            'method' => 'GET',
            'header' => 'User-Agent: PHPUnit Installer/1.0',
            'timeout' => 60
        ],
        'ssl' => [
            'verify_peer' => false,
            'verify_peer_name' => false
        ]
    ]);

    echo "   üîÑ –ó–∞–≥—Ä—É–∑–∫–∞... ";
    $data = @file_get_contents($url, false, $context);

    if ($data === false) {
        echo "‚ùå\n";
        echo "   ‚ö†Ô∏è  file_get_contents –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º cURL\n";

        // –ú–µ—Ç–æ–¥ 2: cURL
        if (extension_loaded('curl')) {
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL, $url);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
            curl_setopt($ch, CURLOPT_USERAGENT, 'PHPUnit Installer/1.0');
            curl_setopt($ch, CURLOPT_TIMEOUT, 60);

            $data = curl_exec($ch);
            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
            curl_close($ch);

            if ($data === false || $httpCode !== 200) {
                echo "‚ùå cURL —Ç–∞–∫–∂–µ –Ω–µ —É–¥–∞–ª—Å—è (HTTP {$httpCode})\n";
                return false;
            }
        } else {
            echo "‚ùå cURL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n";
            return false;
        }
    }

    echo "‚úÖ\n";

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    if (file_put_contents($phpunitPhar, $data) === false) {
        echo "   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª\n";
        return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    $size = filesize($phpunitPhar);
    if ($size < 1024 * 1024) { // –º–µ–Ω–µ–µ 1MB
        echo "   ‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª ({$size} –±–∞–π—Ç), –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å\n";
        unlink($phpunitPhar);
        return false;
    }

    echo "   ‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω (" . round($size / 1024 / 1024, 2) . " MB)\n";

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
    $output = [];
    $returnCode = 0;
    exec("php \"{$phpunitPhar}\" --version 2>&1", $output, $returnCode);

    if ($returnCode === 0) {
        echo "   ‚úÖ PHPUnit PHAR —Ä–∞–±–æ—Ç–∞–µ—Ç: " . implode(' ', $output) . "\n";
        return true;
    } else {
        echo "   ‚ùå PHPUnit PHAR –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n";
        foreach ($output as $line) {
            echo "      {$line}\n";
        }
        unlink($phpunitPhar);
        return false;
    }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
 */
function main()
{
    global $testsDir, $projectDir, $phpunitPhar;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    if (!checkRequirements()) {
        echo "‚ùå –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã\n";
        exit(1);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    $existing = checkExistingPHPUnit($projectDir, $phpunitPhar);
    if (!empty($existing)) {
        echo "ü§î PHPUnit —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É? (y/N): ";
        $handle = fopen("php://stdin", "r");
        $choice = trim(fgets($handle));
        fclose($handle);

        if (strtolower($choice) !== 'y') {
            echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞\n";
            exit(0);
        }
        echo "\n";
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Composer
    $composerAvailable = checkComposer();
    echo "\n";

    // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    echo "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:\n";
    echo "1. –ß–µ—Ä–µ–∑ Composer (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n";
    echo "2. –°–∫–∞—á–∞—Ç—å PHAR —Ñ–∞–π–ª\n";
    echo "3. –û–±–∞ –º–µ—Ç–æ–¥–∞\n";
    echo "0. –í—ã—Ö–æ–¥\n";
    echo "\n–í–∞—à –≤—ã–±–æ—Ä (1-3): ";

    $handle = fopen("php://stdin", "r");
    $choice = trim(fgets($handle));
    fclose($handle);

    echo "\n";

    $success = false;

    switch ($choice) {
        case '1':
            if ($composerAvailable) {
                $success = installViaComposer($projectDir, $composerAvailable);
            } else {
                echo "‚ùå Composer –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n";
            }
            break;

        case '2':
            $success = downloadPHPUnitPhar($phpunitPhar);
            break;

        case '3':
            if ($composerAvailable) {
                $success = installViaComposer($projectDir, $composerAvailable);
            }
            if (!$success || $choice === '3') {
                $success = downloadPHPUnitPhar($phpunitPhar) || $success;
            }
            break;

        case '0':
            echo "–í—ã—Ö–æ–¥\n";
            exit(0);

        default:
            echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä\n";
            exit(1);
    }

    echo "\n";
    echo "================================\n";

    if ($success) {
        echo "üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\n";

        echo "üí° –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n";
        if (file_exists($projectDir . '/vendor/bin/phpunit')) {
            echo "   vendor/bin/phpunit tests/\n";
            echo "   php run_tests.php\n";
        }
        if (file_exists($phpunitPhar)) {
            echo "   php {$phpunitPhar} tests/\n";
        }
        echo "   run_tests.bat (Windows)\n";

        echo "\nüìä –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤:\n";
        echo "   cd " . dirname(__DIR__) . "\n";
        echo "   php tests/run_tests.php\n";

    } else {
        echo "‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å\n\n";

        echo "üí° –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n";
        echo "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Composer: https://getcomposer.org/\n";
        echo "2. –°–∫–∞—á–∞–π—Ç–µ –≤—Ä—É—á–Ω—É—é: https://phar.phpunit.de/phpunit-9.phar\n";
        echo "3. –ì–ª–æ–±–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞: composer global require phpunit/phpunit\n";

        exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main();
