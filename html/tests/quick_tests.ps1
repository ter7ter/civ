# –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π PowerShell —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞–±–æ—á–∏—Ö —Ç–µ—Å—Ç–æ–≤
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .\quick_tests.ps1

Write-Host ""
Write-Host "üß™ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤" -ForegroundColor Cyan
Write-Host "=================================" -ForegroundColor Cyan

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
$ScriptDir = Split-Path -Parent $MyInvocation.MyCommand.Path
$ProjectRoot = Split-Path -Parent $ScriptDir
Set-Location $ProjectRoot

# –ü—Ä–æ–≤–µ—Ä—è–µ–º PHP
try {
    & php --version | Out-Null
    if ($LASTEXITCODE -ne 0) { throw }
    Write-Host "‚úÖ PHP –Ω–∞–π–¥–µ–Ω" -ForegroundColor Green
} catch {
    Write-Host "‚ùå PHP –Ω–µ –Ω–∞–π–¥–µ–Ω!" -ForegroundColor Red
    exit 1
}

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º PHPUnit
$phpunitCmd = ""
if (Test-Path "vendor\bin\phpunit.bat") {
    $phpunitCmd = "vendor\bin\phpunit.bat"
} elseif (Test-Path "tests\phpunit.phar") {
    $phpunitCmd = "php tests\phpunit.phar"
} else {
    try {
        & phpunit --version | Out-Null
        if ($LASTEXITCODE -eq 0) { $phpunitCmd = "phpunit" }
    } catch {}
}

if (!$phpunitCmd) {
    Write-Host "‚ùå PHPUnit –Ω–µ –Ω–∞–π–¥–µ–Ω!" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ PHPUnit: $phpunitCmd" -ForegroundColor Green
Write-Host ""

# –†–∞–±–æ—á–∏–µ —Ç–µ—Å—Ç—ã
$tests = @(
    "tests\unit\CreateGameSimpleTest.php",
    "tests\unit\DatabaseConfigTest.php",
    "tests\unit\UserTest.php",
    "tests\unit\MessageTest.php",
    "tests\unit\PlanetTest.php",
    "tests\unit\ResourceTest.php"
)

$passed = 0
$failed = 0

foreach ($test in $tests) {
    Write-Host "üîÑ –ó–∞–ø—É—Å–∫: $test" -ForegroundColor Yellow

    try {
        & cmd /c "$phpunitCmd --configuration tests\phpunit.xml --no-coverage `"$test`" 2>&1" | Out-Host

        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ –ü–†–û–ô–î–ï–ù" -ForegroundColor Green
            $passed++
        } else {
            Write-Host "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù" -ForegroundColor Red
            $failed++
        }
    } catch {
        Write-Host "‚ùå –û–®–ò–ë–ö–ê: $_" -ForegroundColor Red
        $failed++
    }

    Write-Host ""
}

# –ò—Ç–æ–≥
Write-Host "=================================" -ForegroundColor Cyan
Write-Host "üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:" -ForegroundColor Cyan
Write-Host "–ü—Ä–æ–π–¥–µ–Ω–æ: $passed" -ForegroundColor Green
Write-Host "–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: $failed" -ForegroundColor Red

if ($failed -eq 0) {
    Write-Host ""
    Write-Host "üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!" -ForegroundColor Green
    exit 0
} else {
    Write-Host ""
    Write-Host "‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´" -ForegroundColor Yellow
    exit 1
}
