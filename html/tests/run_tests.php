<?php

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
 * –ó–∞–ø—É—Å–∫: php run_tests.php [–æ–ø—Ü–∏–∏]
 */

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
if (php_sapi_name() !== "cli") {
    die("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏\n");
}

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É
date_default_timezone_set("Europe/Moscow");

// –í–∫–ª—é—á–∞–µ–º bootstrap
require_once __DIR__ . "/bootstrap.php";

/**
 * –ö–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
 */
class TestRunner
{
    private $options = [];
    private $results = [];
    private $startTime;

    public function __construct($argv)
    {
        $this->parseArguments($argv);
        $this->startTime = microtime(true);
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
     */
    private function parseArguments($argv)
    {
        $this->options = [
            "unit" => true,
            "integration" => true,
            "js" => false,
            "coverage" => false,
            "verbose" => false,
            "stop-on-failure" => true, // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            "filter" => null,
            "help" => false,
        ];

        for ($i = 1; $i < count($argv); $i++) {
            switch ($argv[$i]) {
                case "--unit-only":
                    $this->options["integration"] = false;
                    break;
                case "--integration-only":
                    $this->options["unit"] = false;
                    break;
                case "--with-js":
                    $this->options["js"] = true;
                    break;
                case "--coverage":
                    $this->options["coverage"] = true;
                    break;
                case "--verbose":
                case "-v":
                    $this->options["verbose"] = true;
                    break;
                case "--stop-on-failure":
                    $this->options["stop-on-failure"] = true;
                    break;
                case "--filter":
                    if (isset($argv[$i + 1])) {
                        $this->options["filter"] = $argv[$i + 1];
                        $i++;
                    }
                    break;
                case "--help":
                case "-h":
                    $this->options["help"] = true;
                    break;
            }
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
     */
    public function run()
    {
        if ($this->options["help"]) {
            $this->showHelp();
            return 0;
        }

        $this->printHeader();

        $exitCode = 0;

        // –ó–∞–ø—É—Å–∫–∞–µ–º PHP —Ç–µ—Å—Ç—ã
        if ($this->options["unit"] || $this->options["integration"]) {
            $phpResult = $this->runPhpTests();
            if ($phpResult !== 0) {
                $exitCode = $phpResult;
            }
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º JavaScript —Ç–µ—Å—Ç—ã
        if ($this->options["js"]) {
            $jsResult = $this->runJavaScriptTests();
            if ($jsResult !== 0) {
                $exitCode = $jsResult;
            }
        }

        $this->printSummary();

        return $exitCode;
    }

    /**
     * –ó–∞–ø—É—Å–∫ PHP —Ç–µ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ PHPUnit
     */
    private function runPhpTests()
    {
        echo "üß™ –ó–∞–ø—É—Å–∫ PHP —Ç–µ—Å—Ç–æ–≤...\n";
        echo str_repeat("=", 50) . "\n";

        $phpunitConfig = TESTS_ROOT . "/phpunit.xml";
        $phpunitPath = $this->findPhpUnit();

        if (!$phpunitPath) {
            echo "‚ùå PHPUnit –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PHPUnit:\n";
            echo "   composer install --dev\n";
            echo "   –∏–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ phpunit.phar\n";
            return 1;
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ PHPUnit
        $cmd = [];
        if (substr($phpunitPath, -5) === '.phar') {
            $cmd[] = 'php';
        }
        $cmd[] = $phpunitPath;

        if (file_exists($phpunitConfig)) {
            $cmd[] = "--configuration";
            $cmd[] = $phpunitConfig;
        }

        if ($this->options["verbose"]) {
            $cmd[] = "--verbose";
        }

        if ($this->options["stop-on-failure"]) {
            $cmd[] = "--stop-on-failure";
        }

        if ($this->options["coverage"]) {
            $cmd[] = "--coverage-html";
            $cmd[] = TESTS_ROOT . "/coverage-html";
        }

        if ($this->options["filter"]) {
            $cmd[] = "--filter";
            $cmd[] = $this->options["filter"];
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ —Ç–µ—Å—Ç—ã –∑–∞–ø—É—Å–∫–∞—Ç—å
        if ($this->options["unit"] && !$this->options["integration"]) {
            $cmd[] = TESTS_ROOT . "/unit";
        } elseif ($this->options["integration"] && !$this->options["unit"]) {
            $cmd[] = TESTS_ROOT . "/integration";
        }

        $fullCmd = implode(" ", array_map("escapeshellarg", $cmd));

        if ($this->options["verbose"]) {
            echo "–í—ã–ø–æ–ª–Ω—è–µ–º: {$fullCmd}\n\n";
        }

        $startTime = microtime(true);

        // –ó–∞–ø—É—Å–∫–∞–µ–º PHPUnit –±–µ–∑ —Ç–∞–π–º–∞—É—Ç–∞, —á—Ç–æ–±—ã –æ—à–∏–±–∫–∏ –≤—ã–≤–æ–¥–∏–ª–∏—Å—å —Å—Ä–∞–∑—É
        $exitCode = $this->runCommand($fullCmd);

        $duration = microtime(true) - $startTime;

        $this->results["php"] = [
            "exit_code" => $exitCode,
            "duration" => $duration,
        ];

        if ($exitCode === 0) {
            echo "\n‚úÖ PHP —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ (" .
                number_format($duration, 2) .
                "s)\n";
        } else {
            echo "\n‚ùå PHP —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏ (" .
                number_format($duration, 2) .
                "s)\n";
        }

        echo str_repeat("-", 50) . "\n\n";

        return $exitCode;
    }

    /**
     * –ó–∞–ø—É—Å–∫ JavaScript —Ç–µ—Å—Ç–æ–≤
     */
    private function runJavaScriptTests()
    {
        echo "üåê –ó–∞–ø—É—Å–∫ JavaScript —Ç–µ—Å—Ç–æ–≤...\n";
        echo str_repeat("=", 50) . "\n";

        $testFile = TESTS_ROOT . "/js/creategame.test.html";

        if (!file_exists($testFile)) {
            echo "‚ùå JavaScript —Ç–µ—Å—Ç —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {$testFile}\n";
            return 1;
        }

        $startTime = microtime(true);

        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
        $browsers = $this->findAvailableBrowsers();

        if (empty($browsers)) {
            echo "‚ö†Ô∏è  –ë—Ä–∞—É–∑–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. JavaScript —Ç–µ—Å—Ç—ã –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤—Ä—É—á–Ω—É—é.\n";
            echo "   –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: {$testFile}\n";

            $this->results["js"] = [
                "exit_code" => 0,
                "duration" => microtime(true) - $startTime,
                "manual" => true,
            ];

            return 0;
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –≤ –ø–µ—Ä–≤–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ
        $browser = $browsers[0];
        $exitCode = 0;

        try {
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
            $cmd = "{$browser} {$testFile}";
            echo "üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º JavaScript —Ç–µ—Å—Ç—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ...\n";
            echo "   –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ –∑–∞–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä\n";

            if ($this->options["verbose"]) {
                echo "–í—ã–ø–æ–ª–Ω—è–µ–º: {$cmd}\n";
            }

            exec($cmd, $output, $exitCode);
        } catch (Exception $e) {
            echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ JavaScript —Ç–µ—Å—Ç–æ–≤: " .
                $e->getMessage() .
                "\n";
            $exitCode = 1;
        }

        $duration = microtime(true) - $startTime;

        $this->results["js"] = [
            "exit_code" => $exitCode,
            "duration" => $duration,
        ];

        if ($exitCode === 0) {
            echo "‚úÖ JavaScript —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã (" .
                number_format($duration, 2) .
                "s)\n";
        } else {
            echo "‚ùå JavaScript —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏ (" .
                number_format($duration, 2) .
                "s)\n";
        }

        echo str_repeat("-", 50) . "\n\n";

        return $exitCode;
    }

    /**
     * –ü–æ–∏—Å–∫ PHPUnit
     */
    private function findPhpUnit()
    {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º PHPUnit, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —á–µ—Ä–µ–∑ Composer
        $composerPhpunit = PROJECT_ROOT . "/vendor/bin/phpunit";
        if (file_exists($composerPhpunit)) {
            return $composerPhpunit;
        }

        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º phpunit.phar –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
        $projectPhar = PROJECT_ROOT . "/phpunit.phar";
        if (file_exists($projectPhar)) {
            return $projectPhar;
        }

        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º phpunit.phar –≤ –ø–∞–ø–∫–µ tests
        $testsPhar = TESTS_ROOT . "/phpunit.phar";
        if (file_exists($testsPhar)) {
            return $testsPhar;
        }

        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É —á–µ—Ä–µ–∑ PATH
        $isWindows = defined('PHP_OS_FAMILY') ? PHP_OS_FAMILY === 'Windows' : strtoupper(substr(PHP_OS, 0, 3)) === 'WIN';
        $cmd = $isWindows ? "where phpunit" : "which phpunit";
        $output = shell_exec($cmd . " 2>&1");
        if ($output && trim($output) && strpos($output, "not found") === false && strpos($output, "Could not find files") === false) {
            // `where` –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—É—Ç–µ–π, –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É. –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π.
            $lines = explode("\n", trim($output));
            return trim($lines[0]);
        }

        return null;
    }

    /**
     * –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
     */
    private function findAvailableBrowsers()
    {
        $browsers = [];

        $isWindows = defined('PHP_OS_FAMILY') ? PHP_OS_FAMILY === 'Windows' : strtoupper(substr(PHP_OS, 0, 3)) === 'WIN';

        if ($isWindows) {
            $paths = [
                "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe",
                "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe",
                'C:\\Program Files\\Mozilla Firefox\\firefox.exe',
                'C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe',
            ];
        } else {
            $paths = [
                "/usr/bin/google-chrome",
                "/usr/bin/chromium-browser",
                "/usr/bin/firefox",
                "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome",
                "/Applications/Firefox.app/Contents/MacOS/firefox",
            ];
        }

        foreach ($paths as $path) {
            if (file_exists($path)) {
                $browsers[] = $path;
            }
        }

        return $browsers;
    }

    /**
     * –í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞
     */
    private function printHeader()
    {
        echo "\n";
        echo "üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä\n";
        echo str_repeat("=", 60) . "\n";
        echo "–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: " . date("Y-m-d H:i:s") . "\n";
        echo "PHP –≤–µ—Ä—Å–∏—è: " . PHP_VERSION . "\n";
        echo "–ü—Ä–æ–µ–∫—Ç: " . PROJECT_ROOT . "\n";

        $testTypes = [];
        if ($this->options["unit"]) {
            $testTypes[] = "Unit";
        }
        if ($this->options["integration"]) {
            $testTypes[] = "Integration";
        }
        if ($this->options["js"]) {
            $testTypes[] = "JavaScript";
        }

        echo "–¢–∏–ø—ã —Ç–µ—Å—Ç–æ–≤: " . implode(", ", $testTypes) . "\n";

        if ($this->options["filter"]) {
            echo "–§–∏–ª—å—Ç—Ä: " . $this->options["filter"] . "\n";
        }

        echo str_repeat("=", 60) . "\n\n";
    }

    /**
     * –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
     */
    private function printSummary()
    {
        echo "\n";
        echo "üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢\n";
        echo str_repeat("=", 60) . "\n";

        $totalDuration = microtime(true) - $this->startTime;
        $totalTests = 0;
        $passedTests = 0;
        $failedTests = 0;

        foreach ($this->results as $type => $result) {
            $status = $result["exit_code"] === 0 ? "‚úÖ –ü–†–û–ô–î–ï–ù" : "‚ùå –ü–†–û–í–ê–õ–ï–ù";
            $duration = number_format($result["duration"], 2);

            echo sprintf(
                "%-15s: %s (%ss)\n",
                strtoupper($type),
                $status,
                $duration,
            );

            if ($result["exit_code"] === 0) {
                $passedTests++;
            } else {
                $failedTests++;
            }
            $totalTests++;
        }

        echo str_repeat("-", 60) . "\n";
        echo sprintf(
            "–û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: %ss\n",
            number_format($totalDuration, 2),
        );
        echo sprintf("–í—Å–µ–≥–æ –Ω–∞–±–æ—Ä–æ–≤ —Ç–µ—Å—Ç–æ–≤: %d\n", $totalTests);
        echo sprintf("–ü—Ä–æ–π–¥–µ–Ω–æ: %d\n", $passedTests);
        echo sprintf("–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: %d\n", $failedTests);

        if ($failedTests === 0) {
            echo "\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!\n";
        } else {
            echo "\nüí• –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´!\n";
        }

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
        echo "\nüìÅ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã:\n";

        $logFiles = [
            "coverage-html/index.html" => "–û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ –∫–æ–¥–∞",
            "results/junit.xml" => "JUnit XML –æ—Ç—á–µ—Ç",
            "results/testdox.html" => "TestDox HTML –æ—Ç—á–µ—Ç",
            "results/php_errors.log" => "–õ–æ–≥ –æ—à–∏–±–æ–∫ PHP",
        ];

        foreach ($logFiles as $file => $description) {
            $fullPath = TESTS_ROOT . "/" . $file;
            if (file_exists($fullPath)) {
                echo "   ‚úì {$description}: {$fullPath}\n";
            }
        }

        echo str_repeat("=", 60) . "\n";
    }

    /**
     * –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ —Ç–∞–π–º–∞—É—Ç–∞
     */
    private function runCommand($command)
    {
        $descriptors = [
            0 => ['pipe', 'r'], // stdin
            1 => ['pipe', 'w'], // stdout
            2 => ['pipe', 'w'], // stderr
        ];

        $process = proc_open($command, $descriptors, $pipes);

        if (!is_resource($process)) {
            echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—É: {$command}\n";
            return 1;
        }

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º stdin
        fclose($pipes[0]);

        // –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        while (!feof($pipes[1])) {
            $data = fread($pipes[1], 8192);
            if ($data !== false) {
                echo $data;
            }
        }

        while (!feof($pipes[2])) {
            $data = fread($pipes[2], 8192);
            if ($data !== false) {
                echo $data;
            }
        }

        fclose($pipes[1]);
        fclose($pipes[2]);

        $exitCode = proc_close($process);

        return $exitCode;
    }

    /**
     * –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —Å —Ç–∞–π–º–∞—É—Ç–æ–º
     */
    private function runCommandWithTimeout($command, $timeout = 300)
    {
        $descriptors = [
            0 => ['pipe', 'r'], // stdin
            1 => ['pipe', 'w'], // stdout
            2 => ['pipe', 'w'], // stderr
        ];

        $process = proc_open($command, $descriptors, $pipes);

        if (!is_resource($process)) {
            echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—É: {$command}\n";
            return 1;
        }

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º stdin
        fclose($pipes[0]);

        $startTime = time();
        $output = '';
        $errorOutput = '';

        // –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        $stdoutDone = false;
        $stderrDone = false;

        stream_set_blocking($pipes[1], false);
        stream_set_blocking($pipes[2], false);

        while (!$stdoutDone || !$stderrDone) {
            $read = [$pipes[1], $pipes[2]];
            $write = null;
            $except = null;

            if (stream_select($read, $write, $except, 1) > 0) {
                foreach ($read as $stream) {
                    if ($stream === $pipes[1]) {
                        $data = fread($stream, 8192);
                        if ($data === false || $data === '') {
                            $stdoutDone = true;
                        } else {
                            echo $data;
                            $output .= $data;
                        }
                    } elseif ($stream === $pipes[2]) {
                        $data = fread($stream, 8192);
                        if ($data === false || $data === '') {
                            $stderrDone = true;
                        } else {
                            echo $data;
                            $errorOutput .= $data;
                        }
                    }
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
            if (time() - $startTime > $timeout) {
                echo "\n‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç {$timeout} —Å–µ–∫—É–Ω–¥. –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å.\n";
                proc_terminate($process);
                fclose($pipes[1]);
                fclose($pipes[2]);
                proc_close($process);
                return 124; // –ö–æ–¥ –≤—ã—Ö–æ–¥–∞ –¥–ª—è —Ç–∞–π–º–∞—É—Ç–∞
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
            $status = proc_get_status($process);
            if (!$status['running']) {
                break;
            }
        }

        fclose($pipes[1]);
        fclose($pipes[2]);

        $exitCode = proc_close($process);

        return $exitCode;
    }

    /**
     * –í—ã–≤–æ–¥ —Å–ø—Ä–∞–≤–∫–∏
     */
    private function showHelp()
    {
        echo "\n";
        echo "üõ†Ô∏è  –°–ü–†–ê–í–ö–ê –ü–û –¢–ï–°–¢–û–í–û–ú–£ –†–ê–ù–ù–ï–†–£\n";
        echo str_repeat("=", 60) . "\n";
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: php run_tests.php [–æ–ø—Ü–∏–∏]\n\n";
        echo "–û–ü–¶–ò–ò:\n";
        echo "  --unit-only         –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ unit —Ç–µ—Å—Ç–æ–≤\n";
        echo "  --integration-only  –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ integration —Ç–µ—Å—Ç–æ–≤\n";
        echo "  --with-js           –í–∫–ª—é—á–∏—Ç—å JavaScript —Ç–µ—Å—Ç—ã\n";
        echo "  --coverage          –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ –∫–æ–¥–∞\n";
        echo "  --verbose, -v       –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥\n";
        echo "  --stop-on-failure   –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ\n";
        echo "  --filter <pattern>  –§–∏–ª—å—Ç—Ä —Ç–µ—Å—Ç–æ–≤ –ø–æ –∏–º–µ–Ω–∏/–ø–∞—Ç—Ç–µ—Ä–Ω—É\n";
        echo "  --help, -h          –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n";
        echo "–ü–†–ò–ú–ï–†–´:\n";
        echo "  php run_tests.php                    # –í—Å–µ PHP —Ç–µ—Å—Ç—ã\n";
        echo "  php run_tests.php --with-js          # –í—Å–µ —Ç–µ—Å—Ç—ã –≤–∫–ª—é—á–∞—è JS\n";
        echo "  php run_tests.php --unit-only -v     # –¢–æ–ª—å–∫–æ unit —Ç–µ—Å—Ç—ã, –ø–æ–¥—Ä–æ–±–Ω–æ\n";
        echo "  php run_tests.php --coverage         # –° –æ—Ç—á–µ—Ç–æ–º –ø–æ–∫—Ä—ã—Ç–∏—è\n";
        echo "  php run_tests.php --filter CreateGame # –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã CreateGame\n";
        echo str_repeat("=", 60) . "\n";
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–∞–Ω–Ω–µ—Ä–∞
try {
    $runner = new TestRunner($argv);
    $exitCode = $runner->run();
    exit($exitCode);
} catch (Exception $e) {
    echo "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: " . $e->getMessage() . "\n";
    echo "–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:\n" . $e->getTraceAsString() . "\n";
    exit(1);
}
