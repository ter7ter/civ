<?php

/**
 * –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã SQLite —Å auto increment
 */

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É
date_default_timezone_set("Europe/Moscow");

// –í–∫–ª—é—á–∞–µ–º bootstrap
require_once __DIR__ . "/bootstrap.php";

echo "üîß –û–¢–õ–ê–î–ö–ê SQLITE AUTO INCREMENT\n";
echo str_repeat("=", 50) . "\n";

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
try {
    $db = MyDB::get();
    echo "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n";
    echo "   –¢–∏–ø –ë–î: " . $db->getAttribute(PDO::ATTR_DRIVER_NAME) . "\n";
    echo "   –í–µ—Ä—Å–∏—è SQLite: " . $db->query('SELECT sqlite_version()')->fetchColumn() . "\n";
} catch (Exception $e) {
    echo "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: " . $e->getMessage() . "\n";
    exit(1);
}

// –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
echo "\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü...\n";
try {
    MyDB::query("DELETE FROM game");
    MyDB::query("DELETE FROM user");
    MyDB::query("DELETE FROM sqlite_sequence WHERE name IN ('game', 'user')");
    echo "‚úÖ –¢–∞–±–ª–∏—Ü—ã –æ—á–∏—â–µ–Ω—ã\n";
} catch (Exception $e) {
    echo "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: " . $e->getMessage() . "\n";
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –≤—Å—Ç–∞–≤–∫—É –∑–∞–ø–∏—Å–µ–π
echo "\nüß™ –¢–µ—Å—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏ –≤ game:\n";

for ($i = 1; $i <= 3; $i++) {
    try {
        $gameData = [
            'name' => "–ò–≥—Ä–∞ $i",
            'map_w' => 100,
            'map_h' => 100,
            'turn_type' => 'byturn',
            'turn_num' => 1
        ];

        echo "   –í—Å—Ç–∞–≤–ª—è–µ–º –∏–≥—Ä—É $i...\n";
        $insertedId = MyDB::insert('game', $gameData);

        if ($insertedId) {
            echo "   ‚úÖ –ò–≥—Ä–∞ $i —Å–æ–∑–¥–∞–Ω–∞ —Å ID: $insertedId\n";

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º PDO lastInsertId
            $pdoLastId = $db->lastInsertId();
            echo "   üìä PDO lastInsertId(): $pdoLastId\n";

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
            $saved = MyDB::query("SELECT * FROM game WHERE id = :id", ['id' => $insertedId], 'row');
            if ($saved) {
                echo "   üìÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ID={$saved['id']}, Name='{$saved['name']}'\n";
            } else {
                echo "   ‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î!\n";
            }
        } else {
            echo "   ‚ùå insert() –≤–µ—Ä–Ω—É–ª: " . var_export($insertedId, true) . "\n";
        }
    } catch (Exception $e) {
        echo "   ‚ùå –û—à–∏–±–∫–∞: " . $e->getMessage() . "\n";
    }
    echo "\n";
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫ auto increment
echo "üî¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—á–µ—Ç—á–∏–∫–∞ auto increment:\n";
try {
    $sequence = MyDB::query("SELECT seq FROM sqlite_sequence WHERE name = 'game'", [], 'row');
    if ($sequence) {
        echo "   –¢–µ–∫—É—â–∏–π seq –¥–ª—è game: {$sequence['seq']}\n";
    } else {
        echo "   –ù–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ sqlite_sequence –¥–ª—è game\n";
    }
} catch (Exception $e) {
    echo "   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è sequence: " . $e->getMessage() . "\n";
}

// –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã —á–µ—Ä–µ–∑ –∫–ª–∞—Å—Å Game
echo "\nüéÆ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ –∫–ª–∞—Å—Å Game:\n";
try {
    $gameObj = new Game([
        'name' => '–¢–µ—Å—Ç–æ–≤–∞—è –∏–≥—Ä–∞ —á–µ—Ä–µ–∑ –∫–ª–∞—Å—Å',
        'map_w' => 150,
        'map_h' => 150,
        'turn_type' => 'byturn',
        'turn_num' => 1
    ]);

    echo "   –û–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω, id –¥–æ save(): " . var_export($gameObj->id, true) . "\n";

    $gameObj->save();

    echo "   –ü–æ—Å–ª–µ save() id = " . var_export($gameObj->id, true) . "\n";

    if ($gameObj->id) {
        echo "   ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å ID: {$gameObj->id}\n";
    } else {
        echo "   ‚ùå –û—à–∏–±–∫–∞: id –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n";
    }
} catch (Exception $e) {
    echo "   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ –∫–ª–∞—Å—Å: " . $e->getMessage() . "\n";
}

// –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
echo "\nüë§ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n";
if (isset($gameObj) && $gameObj->id) {
    for ($i = 1; $i <= 2; $i++) {
        try {
            $userData = [
                'login' => "–ò–≥—Ä–æ–∫$i",
                'color' => $i == 1 ? '#ff0000' : '#00ff00',
                'game' => $gameObj->id,
                'turn_order' => $i,
                'turn_status' => 'wait',
                'money' => 50,
                'age' => 1
            ];

            echo "   –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $i...\n";
            $user = new User($userData);
            echo "   –û–±—ä–µ–∫—Ç User —Å–æ–∑–¥–∞–Ω, id –¥–æ save(): " . var_export($user->id, true) . "\n";

            $user->save();
            echo "   –ü–æ—Å–ª–µ save() id = " . var_export($user->id, true) . "\n";

            if ($user->id) {
                echo "   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $i —Å–æ–∑–¥–∞–Ω —Å ID: {$user->id}\n";
            } else {
                echo "   ‚ùå –û—à–∏–±–∫–∞: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n";
            }
        } catch (Exception $e) {
            echo "   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $i: " . $e->getMessage() . "\n";
        }
    }
} else {
    echo "   ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –Ω–µ—Ç –∏–≥—Ä—ã\n";
}

// –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
echo "\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:\n";
try {
    $games = MyDB::query("SELECT * FROM game ORDER BY id");
    echo "   –ò–≥—Ä –≤ –ë–î: " . count($games) . "\n";
    foreach ($games as $game) {
        echo "     - ID: {$game['id']}, Name: '{$game['name']}'\n";
    }

    $users = MyDB::query("SELECT * FROM user ORDER BY id");
    echo "   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î: " . count($users) . "\n";
    foreach ($users as $user) {
        echo "     - ID: {$user['id']}, Login: '{$user['login']}', Game: {$user['game']}\n";
    }
} catch (Exception $e) {
    echo "   ‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: " . $e->getMessage() . "\n";
}

// –¢–µ—Å—Ç –Ω–∞ edge cases
echo "\n‚ö†Ô∏è –¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤:\n";

// –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
try {
    echo "   –¢–µ—Å—Ç –≤—Å—Ç–∞–≤–∫–∏ –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö...\n";
    $emptyId = MyDB::insert('game', []);
    echo "   –†–µ–∑—É–ª—å—Ç–∞—Ç: " . var_export($emptyId, true) . "\n";
} catch (Exception $e) {
    echo "   ‚ùå –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: " . $e->getMessage() . "\n";
}

// NULL –∑–Ω–∞—á–µ–Ω–∏—è
try {
    echo "   –¢–µ—Å—Ç –≤—Å—Ç–∞–≤–∫–∏ NULL –∑–Ω–∞—á–µ–Ω–∏–π...\n";
    $nullId = MyDB::insert('game', [
        'name' => 'NULL Test',
        'map_w' => null,
        'map_h' => 100,
        'turn_type' => 'byturn',
        'turn_num' => 1
    ]);
    echo "   –†–µ–∑—É–ª—å—Ç–∞—Ç: " . var_export($nullId, true) . "\n";
} catch (Exception $e) {
    echo "   ‚ùå –û—à–∏–±–∫–∞ —Å NULL: " . $e->getMessage() . "\n";
}

echo "\n" . str_repeat("=", 50) . "\n";
echo "üèÅ –û—Ç–ª–∞–¥–∫–∞ SQLite –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n";
