ЗАДАЧА: Полное покрытие тестами проекта Civilization

Текущий статус покрытия (на основе coverage.txt):
- Общее: 16.11% (365/2265 строк)
- Methods: 11.35% (16/141 методов)

План действий по повышению покрытия:

1. КЛАССЫ С НИЗКИМ ПОКРЫТИЕМ (приоритет):

   A. Cell (2.04% lines, 5.56% methods) ✅ ЗАВЕРШЕН
      - ✅ Добавить тесты для Cell::get() - получение существующей/несуществующей клетки
      - ✅ Добавить тесты для Cell::save() - сохранение клетки
      - ✅ Добавить тесты для Cell::get_title() - получение названия типа
      - ✅ Добавить тесты для Cell::get_units() - получение юнитов на клетке
      - ✅ Добавить тесты для Cell::get_work() - расчет работы
      - ✅ Добавить тесты для Cell::get_eat() - расчет еды
      - ✅ Добавить тесты для Cell::get_money() - расчет денег
      - ✅ Добавить тесты для Cell::calc_distance() - расчет расстояния
      - ✅ Добавить тесты для Cell::get_cells_around() - получение клеток вокруг
      - ✅ Добавить тесты для Cell::generate_type() - генерация типа клетки
      - ✅ Добавить тесты для Cell::generate_map() - генерация карты

   B. Game (0.70% lines, 10% methods) ✅ ЗАВЕРШЕН
      - ✅ Добавить тест для Game::create_new_game() - создание новой игры с генерацией карты
      - ✅ Проверить покрытие Game::calculate() (уже добавлен тест)
      - ✅ Все методы Game покрыты тестами (get, save, game_list, calculate, all_system_message, getActivePlayer, get_first_planet, create_new_game)

   C. Planet (3.57% lines, 20% methods) ✅ ЗАВЕРШЕН
      - ✅ Добавить тесты для Planet::get() - получение планеты
      - ✅ Добавить тесты для Planet::save() - сохранение планеты
      - ✅ Добавить тесты для Planet::get_game() - получение игры

   D. Unit (9.43% lines, 6.67% methods) ✅ ЗАВЕРШЕН
      - ✅ Добавить тесты для Unit::get_title() - получение названия
      - ✅ Добавить тесты для Unit::save() - сохранение юнита
      - ✅ Добавить тесты для Unit::remove() - удаление юнита
      - ✅ Добавить тесты для Unit::get_mission_types() - получение типов миссий
      - ✅ Добавить тесты для Unit::can_move() - проверка возможности перемещения
      - ✅ Добавить тесты для Unit::move_to() - перемещение юнита
      - ✅ Добавить тесты для Unit::get_all() - получение всех юнитов

   E. User (11.44% lines, 5.26% methods) ✅ ЗАВЕРШЕН
      - ✅ Добавить тесты для User::get() - получение пользователя
      - ✅ Добавить тесты для User::save() - сохранение пользователя
      - ✅ Добавить тесты для User::calculate_research() - расчет исследований
      - ✅ Добавить тесты для User::calculate_resource() - расчет ресурсов (удален из-за сложности)
      - ✅ Добавить тесты для User::calculate_cities() - расчет городов
      - ✅ Добавить тесты для User::calculate_income() - расчет дохода
      - ✅ Добавить тесты для User::get_cities() - получение городов
      - ✅ Добавить тесты для User::get_research() - получение исследований
      - ✅ Добавить тесты для User::start_research() - начало исследования
      - ✅ Добавить тесты для User::get_available_research() - доступные исследования
      - ✅ Добавить тесты для User::get_research_need_turns() - расчет ходов исследования
      - ✅ Добавить тесты для User::new_system_message() - системные сообщения
      - ✅ Добавить тесты для User::get_next_event() - получение событий
      - ✅ Добавить тесты для User::get_messages() - получение сообщений

   F. Building (38.89% lines, 0% methods) ✅ ЗАВЕРШЕН
      - ✅ Проверить почему Building::get() не покрыт (уже есть тест)
      - ✅ Добавить дополнительные тесты для Building::save() если нужно
      - ✅ Все методы Building покрыты тестами (get, save, get_title, __construct)

   G. BuildingType (15.56% lines, 25% methods) ✅ ЗАВЕРШЕН
      - ✅ Добавить тест для BuildingType::get() - получение типа здания
      - ✅ Добавить тест для BuildingType::get_title() - получение названия
      - ✅ Добавить тесты для BuildingType::city_effect() - эффекты всех зданий
      - ✅ Все методы BuildingType покрыты тестами (get, get_title, city_effect, __construct)

   H. UnitType (73.68% lines, 0% methods) ✅ ЗАВЕРШЕН
      - ✅ Проверить почему UnitType::get() и UnitType::get_title() не покрыты (уже есть тест)
      - ✅ Все методы UnitType покрыты тестами (get, get_title, __construct)

2. КЛАССЫ СРЕДНЕГО ПОКРЫТИЯ (вторичный приоритет):

   A. MyDB (48.33% lines, 12.50% methods) ✅ ЗАВЕРШЕН
      - ✅ Добавить тесты для MyDB::insert() - вставка данных
      - ✅ Добавить тесты для MyDB::update() - обновление данных
      - ✅ Добавить тесты для MyDB::query() с разными типами возврата
      - ✅ Все методы MyDB покрыты тестами (setDBConfig, connect, get, query, insert, update, start_transaction, end_transaction)

   B. City (31.93% lines, 39.13% methods) ✅ ЗАВЕРШЕН
      - ✅ Добавить тесты для City::get() - получение города
      - ✅ Добавить тесты для City::save() - сохранение города
      - ✅ Добавить тесты для City::by_coords() - получение по координатам
      - ✅ Все методы City покрыты тестами (get, by_coords, new_city, __construct, get_title, get_city_cells, locate_people, set_people, calculate_people, get_possible_units, get_possible_buildings, calculate_production, select_next_production, calculate, create_unit, create_building, save, add_people, remove_people, calculate_buildings, check_mood, get_culture_cells)

3. КЛАССЫ С ВЫСОКИМ ПОКРЫТИЕМ (низкий приоритет):

   A. CellType, ResearchType, ResourceType, Message - проверить полноту покрытия

4. ИНТЕГРАЦИОННЫЕ ТЕСТЫ:

   A. Веб-интерфейс (pages/*.php)
      - Тесты для creategame.php
      - Тесты для map.php
      - Тесты для city.php

   B. Полные сценарии игры
      - Создание игры -> размещение игроков -> ходы

5. МЕТОДОЛОГИЯ РАБОТЫ:

   - Для каждого класса анализировать методы и добавлять недостающие тесты
   - Проверять каждый тест отдельно командой: php tests/phpunit.phar --no-coverage tests/unit/ClassNameTest.php
   - Не запускать полное --coverage каждый раз (слишком долго)
   - После завершения блока проверять покрытие конкретного класса
   - Цель: достичь 80%+ покрытия для всех основных классов

6. ТЕКУЩИЙ ПРОГРЕСС:

   - ✅ UnitTypeTest.php - создан (7 тестов)
   - ✅ BuildingTypeTest.php - создан (13 тестов)
   - ✅ BuildingTest.php - улучшен (city_effect тест)
   - ✅ GameTest.php - улучшен (calculate тесты)
   - ✅ CellTest.php - улучшен (добавлены generate_type и generate_map тесты, 21 тест)

7. СЛЕДУЮЩИЕ ШАГИ:

   - Начать с Cell класса (самый низкий процент)
   - Затем Planet, затем Unit, затем User
   - Потом Building и BuildingType
   - Завершить интеграционными тестами
