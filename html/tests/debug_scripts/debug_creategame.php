<?php

/**
 * –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã
 */

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É
date_default_timezone_set("Europe/Moscow");

// –í–∫–ª—é—á–∞–µ–º bootstrap
require_once __DIR__ . "/bootstrap.php";

echo "üîß –û–¢–õ–ê–î–ö–ê –°–¢–†–ê–ù–ò–¶–´ –°–û–ó–î–ê–ù–ò–Ø –ò–ì–†–´\n";
echo str_repeat("=", 50) . "\n";

// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
$testData = [
    "name" => "–¢–µ—Å—Ç–æ–≤–∞—è –∏–≥—Ä–∞ XSS",
    "map_w" => 100,
    "map_h" => 100,
    "turn_type" => "byturn",
    "users" => ['<img src="x" onerror="alert(1)">', "–ò–≥—Ä–æ–∫2"]
];

// –ò–º–∏—Ç–∏—Ä—É–µ–º REQUEST –¥–∞–Ω–Ω—ã–µ
$_REQUEST = $testData;
$_POST = $testData;

echo "üìù –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:\n";
print_r($testData);
echo "\n";

echo "üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã...\n\n";

// –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç –≤—ã–≤–æ–¥–∞
ob_start();

try {
    // –ó–¥–µ—Å—å –±—É–¥–µ–º –ø–æ—à–∞–≥–æ–≤–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–¥ –∏–∑ creategame.php

    if (
        isset($_REQUEST["name"]) &&
        isset($_REQUEST["users"]) &&
        is_array($_REQUEST["users"])
    ) {
        echo "‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã\n";

        $name = trim(htmlspecialchars($_REQUEST["name"]));
        $map_w = (int) $_REQUEST["map_w"];
        $map_h = (int) $_REQUEST["map_h"];
        $turn_type = $_REQUEST["turn_type"];

        echo "   name: '$name'\n";
        echo "   map_w: $map_w\n";
        echo "   map_h: $map_h\n";
        echo "   turn_type: '$turn_type'\n";

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        $errors = [];

        if (empty($name)) {
            $errors[] = "–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º";
        }

        if ($map_w < 50 || $map_w > 500) {
            $errors[] = "–®–∏—Ä–∏–Ω–∞ –∫–∞—Ä—Ç—ã –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 50 –¥–æ 500";
        }

        if ($map_h < 50 || $map_h > 500) {
            $errors[] = "–í—ã—Å–æ—Ç–∞ –∫–∞—Ä—Ç—ã –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 50 –¥–æ 500";
        }

        if (!in_array($turn_type, ["concurrently", "byturn", "onewindow"])) {
            $turn_type = "byturn"; // –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }

        if (!empty($errors)) {
            echo "‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: " . implode(", ", $errors) . "\n";
            exit(1);
        }

        echo "‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞\n";

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        $users = [];
        $user_logins = [];
        $num = 0;

        foreach ($_REQUEST["users"] as $user_login) {
            $user_login = trim(htmlspecialchars($user_login));
            if (empty($user_login)) {
                continue; // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –ø–æ–ª—è
            }

            if (in_array($user_login, $user_logins)) {
                $errors[] = "–ò–≥—Ä–æ–∫ '$user_login' —É–∫–∞–∑–∞–Ω –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑";
                continue;
            }

            $num++;
            $user_logins[] = $user_login;

            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–≤–µ—Ç–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞
            $color = "#";
            $sym = "ff";
            $color_num = $num;

            if ($num > 8) {
                $sym = "88";
                $color_num = $num - 8;
            }

            if (($color_num & 4) > 0) {
                $color .= $sym;
            } else {
                $color .= "00";
            }
            if (($color_num & 2) > 0) {
                $color .= $sym;
            } else {
                $color .= "00";
            }
            if (($color_num & 1) > 0) {
                $color .= $sym;
            } else {
                $color .= "00";
            }

            $users[] = [
                "login" => $user_login,
                "color" => $color,
                "order" => $num,
            ];

            echo "   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $num: '$user_login' ($color)\n";
        }

        if (count($users) < 2) {
            $errors[] = "–î–ª—è –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞";
        }

        if (count($users) > 16) {
            $errors[] = "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤: 16";
        }

        if (!empty($errors)) {
            echo "‚ùå –û—à–∏–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " . implode(", ", $errors) . "\n";
            exit(1);
        }

        echo "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã (" . count($users) . " –∏–≥—Ä–æ–∫–æ–≤)\n\n";

        // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É
        echo "üéÆ –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã...\n";
        try {
            $game_data = [
                "name" => $name,
                "map_w" => $map_w,
                "map_h" => $map_h,
                "turn_type" => $turn_type,
                "turn_num" => 1,
            ];

            echo "   –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Game —Å –¥–∞–Ω–Ω—ã–º–∏:\n";
            print_r($game_data);

            $game = new Game($game_data);

            if ($game) {
                echo "‚úÖ –û–±—ä–µ–∫—Ç Game —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ\n";
                echo "   game->id –¥–æ save(): " . var_export($game->id, true) . "\n";
            } else {
                echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç Game\n";
                exit(1);
            }

            echo "   –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É...\n";
            $game->save();

            echo "   game->id –ø–æ—Å–ª–µ save(): " . var_export($game->id, true) . "\n";

            if ($game->id === null || $game->id === false) {
                echo "‚ùå –ü–†–û–ë–õ–ï–ú–ê: game->id = " . var_export($game->id, true) . "\n";

                // –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –ë–î
                $lastId = MyDB::get()->lastInsertId();
                echo "   PDO lastInsertId(): " . var_export($lastId, true) . "\n";

                // –ü—Ä–æ–≤–µ—Ä–∏–º –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ game
                $gameCount = MyDB::query("SELECT COUNT(*) FROM game", [], "el");
                echo "   –ó–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ game: $gameCount\n";

                $lastGame = MyDB::query("SELECT * FROM game ORDER BY id DESC LIMIT 1", [], "row");
                if ($lastGame) {
                    echo "   –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å –≤ game:\n";
                    print_r($lastGame);
                } else {
                    echo "   –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ game\n";
                }

                exit(1);
            }

            echo "‚úÖ –ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å ID: {$game->id}\n\n";

            // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            echo "üë• –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n";
            foreach ($users as $user_data) {
                echo "   –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {$user_data['login']}\n";

                $user_create_data = [
                    "login" => $user_data["login"],
                    "color" => $user_data["color"],
                    "game" => $game->id,
                    "turn_order" => $user_data["order"],
                    "turn_status" => "wait",
                    "money" => 50, // –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏
                    "age" => 1,
                ];

                echo "   –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n";
                print_r($user_create_data);

                $u = new User($user_create_data);
                echo "   –û–±—ä–µ–∫—Ç User —Å–æ–∑–¥–∞–Ω\n";

                $u->save();
                echo "   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ID: " . var_export($u->id, true) . "\n";

                if ($u->id === null || $u->id === false) {
                    echo "‚ùå –ü–†–û–ë–õ–ï–ú–ê —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n";
                    exit(1);
                }
            }

            echo "‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã\n\n";

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –∏ –Ω–∞—á–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
            echo "üó∫Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π...\n";
            try {
                $game->create_new_game();
                echo "‚úÖ –ö–∞—Ä—Ç–∞ –∏ –Ω–∞—á–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Å–æ–∑–¥–∞–Ω—ã\n";
            } catch (Exception $e) {
                echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã: " . $e->getMessage() . "\n";
                echo "   Trace: " . $e->getTraceAsString() . "\n";
                // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã —Ö–æ–¥–æ–≤
            echo "‚ôªÔ∏è –†–∞—Å—á–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤...\n";
            try {
                $game->calculate();
                $game->turn_num = 1; // calculate() —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ö–æ–¥–∞, –∞ –Ω–∞–º –Ω—É–∂–µ–Ω 1-–π
                $game->save();
                echo "‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã\n";
            } catch (Exception $e) {
                echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ: " . $e->getMessage() . "\n";
                echo "   Trace: " . $e->getTraceAsString() . "\n";
            }

            echo "üèÅ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ! ID: {$game->id}\n";

        } catch (Exception $e) {
            echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã: " . $e->getMessage() . "\n";
            echo "   Trace: " . $e->getTraceAsString() . "\n";
        }

    } else {
        echo "‚ùå –ù–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–ø—Ä–æ—Å–µ\n";
    }

} catch (Exception $e) {
    echo "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: " . $e->getMessage() . "\n";
    echo "   Trace: " . $e->getTraceAsString() . "\n";
} finally {
    $output = ob_get_clean();
    echo $output;
}

echo "\n" . str_repeat("=", 50) . "\n";
echo "üèÅ –û—Ç–ª–∞–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n";
