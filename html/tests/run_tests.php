<?php
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
 * –ó–∞–ø—É—Å–∫: php run_tests.php [–æ–ø—Ü–∏–∏]
 */

define("PROJECT_ROOT", dirname(__DIR__));

if (php_sapi_name() !== "cli") {
    die("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏\n");
}

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É

date_default_timezone_set("Europe/Moscow");

class TestRunner
{
    private $options = [];
    private $results = [];
    private $startTime;

    public function __construct($argv)
    {
        $this->parseArguments($argv);
        $this->startTime = microtime(true);
    }

    private function parseArguments($argv)
    {
        $this->options = [
            "unit" => true,
            "integration" => true,
            "js" => true,
            "coverage" => false,
            "generate-coverage-report-only" => false,
            "verbose" => false,
            "stop-on-failure" => true,
            "filter" => null,
            "help" => false,
            "no-parallel" => false,
            "processes" => null,
            "timeout" => 200,
        ];

        $i = 1;
        while ($i < count($argv)) {
            $arg = $argv[$i];
            switch ($arg) {
                case "--unit-only":
                    $this->options["integration"] = false;
                    $this->options["js"] = false;
                    break;
                case "--integration-only":
                    $this->options["unit"] = false;
                    $this->options["js"] = false;
                    break;
                case "--js-only":
                    $this->options["unit"] = false;
                    $this->options["integration"] = false;
                    $this->options["js"] = true;
                    break;
                case "--with-js":
                    $this->options["js"] = true;
                    break;
                case "--js-only":
                    $this->options["unit"] = false;
                    $this->options["integration"] = false;
                    $this->options["js"] = true;
                    break;
                case "--coverage":
                    $this->options["coverage"] = true;
                    break;
                case "--generate-coverage-report-only":
                    $this->options["generate-coverage-report-only"] = true;
                    $this->options["unit"] = false;
                    $this->options["integration"] = false;
                    $this->options["js"] = false;
                    break;
                case "--verbose":
                case "-v":
                    $this->options["verbose"] = true;
                    break;
                case "--stop-on-failure":
                    $this->options["stop-on-failure"] = true;
                    break;
                case "--filter":
                    if (isset($argv[$i + 1])) {
                        $this->options["filter"] = $argv[$i + 1];
                        $this->options["js"] = false;
                        $i++;
                    }
                    break;
                case "--help":
                case "-h":
                    $this->options["help"] = true;
                    break;
                case "--no-parallel":
                    $this->options["no-parallel"] = true;
                    break;
                case "--processes":
                    if (isset($argv[$i + 1])) {
                        $this->options["processes"] = (int)$argv[$i + 1];
                        $i++;
                    }
                    break;
                case "--timeout":
                    if (isset($argv[$i + 1])) {
                        $this->options["timeout"] = (int)$argv[$i + 1];
                        $i++;
                    }
                    break;
                default:
                    echo "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: " . $arg . "\n";
                    $this->options["help"] = true;
                    return;
            }
            $i++;
        }
    }

    public function run()
    {
        if ($this->options["help"]) {
            $this->showHelp();
            return 0;
        }

        $this->printHeader();

        $exitCode = 0;

        if (!$this->options["generate-coverage-report-only"] && ($this->options["unit"] || $this->options["integration"])) {
            $phpResult = $this->runPhpTests();
            if ($phpResult !== 0) {
                $exitCode = $phpResult;
            }
        } elseif ($this->options["generate-coverage-report-only"]) {
            $phpResult = $this->runPhpTests();
            if ($phpResult !== 0) {
                $exitCode = $phpResult;
            }
        }

        if ($this->options["js"]) {
            $jsResult = $this->runJavaScriptTests();
            if ($jsResult !== 0) {
                $exitCode = $jsResult;
            }
        }

        $this->printSummary();

        return $exitCode;
    }

    private function runPhpTests()
    {
        echo "üß™ –ó–∞–ø—É—Å–∫ PHP —Ç–µ—Å—Ç–æ–≤...\n";
        echo str_repeat("=", 50) . "\n";

        $phpunitConfig = __DIR__ . "/phpunit.xml";
        $paratestConfigPath = __DIR__ . '/phpunit.paratest.xml';
        $phpunitPath = $this->findPhpUnit();
        $paratestPath = $this->findParaTest();
        $useParatest = $paratestPath && !$this->options["no-parallel"];
        if ($this->options["filter"]) {
            $useParatest = false;
        }
        $processes = $this->options["processes"] ?? 4;

        if (!$phpunitPath) {
            echo "‚ùå PHPUnit –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PHPUnit:\n";
            echo "   composer install --dev\n";
            echo "   –∏–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ phpunit.phar\n";
            return 1;
        }

        $cmd = [];
        $isWindows = defined('PHP_OS_FAMILY') ? PHP_OS_FAMILY === 'Windows' : strtoupper(substr(PHP_OS, 0, 3)) === 'WIN';
        if ($useParatest && $this->options["coverage"] && $isWindows) {
            echo "‚ö†Ô∏è  –ù–∞ Windows –ø–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ Paratest –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –æ–±—ã—á–Ω—ã–π phpunit.\n";
            $useParatest = false;
        }

        if ($useParatest) {
            // Create a temporary phpunit.xml for paratest without the junit logger
            $phpunitConfigContent = file_get_contents($phpunitConfig);
            $phpunitConfigContent = preg_replace('/<junit[^>]+>/', '', $phpunitConfigContent);
            file_put_contents($paratestConfigPath, $phpunitConfigContent);
            
            register_shutdown_function(function() use ($paratestConfigPath) {
                if (file_exists($paratestConfigPath)) {
                    unlink($paratestConfigPath);
                }
            });

            $phpPath = $this->findPhp();
            if ($phpPath) {
                $cmd[] = $phpPath;
            }
            $cmd[] = $paratestPath;
            if ($this->options["coverage"]) {
                $cmd[] = "--processes=1";
                $cmd[] = "--coverage-html=" . __DIR__ . "/coverage-html";
                $cmd[] = "--coverage-text=" . __DIR__ . "/coverage.txt";
                $cmd[] = "--coverage-php=" . __DIR__ . "/coverage.php";
            } else {
                $cmd[] = "--processes=" . $processes;
                $cmd[] = "--no-coverage";
            }
            $cmd[] = "--configuration=" . $paratestConfigPath; // Use the temporary config
            if ($this->options["verbose"]) {
                $cmd[] = "--verbose";
            }
            if ($this->options["stop-on-failure"]) {
                $cmd[] = "--stop-on-error";
            }
            if ($this->options["filter"]) {
                $cmd[] = "--filter=" . $this->options["filter"];
            }
            if ($this->options["unit"] && !$this->options["integration"]) {
                $cmd[] = __DIR__ . "/unit";
            } elseif ($this->options["integration"] && !$this->options["unit"]) {
                $cmd[] = __DIR__ . "/integration";
            }
        } else {
            if (substr($phpunitPath, -5) === '.phar') {
                $cmd[] = 'php';
            }
            $cmd[] = $phpunitPath;
            if (file_exists($phpunitConfig)) {
                $cmd[] = "--configuration";
                $cmd[] = $phpunitConfig;
            }
            if ($this->options["coverage"]) {
                $cmd[] = "--coverage-html";
                $cmd[] = __DIR__ . "/coverage-html";
                $cmd[] = "--coverage-text=" . __DIR__ . "/coverage.txt";
                $cmd[] = "--coverage-php";
                $cmd[] = __DIR__ . "/coverage.php";
            }
            if ($this->options["verbose"]) {
                $cmd[] = "--verbose";
                $cmd[] = "--debug";
            }
            if ($this->options["stop-on-failure"]) {
                $cmd[] = "--stop-on-failure";
            }
            if ($this->options["filter"]) {
                $cmd[] = "--filter";
                $cmd[] = $this->options["filter"];
            }
            if ($this->options["unit"] && !$this->options["integration"]) {
                $cmd[] = __DIR__ . "/unit";
            } elseif ($this->options["integration"] && !$this->options["unit"]) {
                $cmd[] = __DIR__ . "/integration";
            }
        }

        $fullCmd = implode(" ", array_map("escapeshellarg", $cmd));
        if ($this->options["verbose"]) {
            echo "–í—ã–ø–æ–ª–Ω—è–µ–º: " . $fullCmd . "\n\n";
        }

        $startTime = microtime(true);
        $exitCode = $this->runCommand($fullCmd);
        $duration = microtime(true) - $startTime;

        $this->results["php"] = [
            "exit_code" => $exitCode,
            "duration" => $duration,
        ];

        if ($exitCode === 0) {
            echo "\n‚úÖ PHP —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ (" . number_format($duration, 2) . "s)\n";
        } else {
            echo "\n‚ùå PHP —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏ (" . number_format($duration, 2) . "s)\n";
        }

        echo str_repeat("-", 50) . "\n\n";
        return $exitCode;
    }

    private function runJavaScriptTests()
    {
        echo "üåê –ó–∞–ø—É—Å–∫ JavaScript —Ç–µ—Å—Ç–æ–≤...\n";
        echo str_repeat("=", 50) . "\n";

        $testFiles = glob(__DIR__ . "/js/*.html");

        if (empty($testFiles)) {
            echo "‚ùå JavaScript —Ç–µ—Å—Ç —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ " . __DIR__ . "/js/\n";
            return 1;
        }

        $startTime = microtime(true);
        $browsers = $this->findAvailableBrowsers();

        if (empty($browsers)) {
            echo "‚ö†Ô∏è  –ë—Ä–∞—É–∑–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. JavaScript —Ç–µ—Å—Ç—ã –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤—Ä—É—á–Ω—É—é.\n";
            foreach ($testFiles as $testFile) {
                echo "   –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: " . $testFile . "\n";
            }
            $this->results["js"] = [
                "exit_code" => 0,
                "duration" => microtime(true) - $startTime,
                "manual" => true,
            ];
            return 0;
        }

        $browser = $browsers[0];
        $exitCode = 0;

        foreach ($testFiles as $testFile) {
            try {
                $cmd = "\"" . $browser . "\" \"" . $testFile . "\"";
                echo "üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º JavaScript —Ç–µ—Å—Ç—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ: " . $testFile . "\n";
                echo "   –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ –∑–∞–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä\n";
                if ($this->options["verbose"]) {
                    echo "–í—ã–ø–æ–ª–Ω—è–µ–º: " . $cmd . "\n";
                }
                exec($cmd, $output, $exitCode);
            } catch (Exception $e) {
                echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ JavaScript —Ç–µ—Å—Ç–æ–≤: " . $e->getMessage() . "\n";
                $exitCode = 1;
            }
        }

        $duration = microtime(true) - $startTime;
        $this->results["js"] = [
            "exit_code" => $exitCode,
            "duration" => $duration,
        ];

        if ($exitCode === 0) {
            echo "‚úÖ JavaScript —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã (" . number_format($duration, 2) . "s)\n";
        } else {
            echo "‚ùå JavaScript —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏ (" . number_format($duration, 2) . "s)\n";
        }

        echo str_repeat("-", 50) . "\n\n";
        return $exitCode;
    }

    private function findPhpUnit()
    {
        $composerPhpunit = PROJECT_ROOT . "/vendor/bin/phpunit";
        if (file_exists($composerPhpunit)) {
            return $composerPhpunit;
        }
        $projectPhar = PROJECT_ROOT . "/phpunit.phar";
        if (file_exists($projectPhar)) {
            return $projectPhar;
        }
        $testsPhar = __DIR__ . "/phpunit.phar";
        if (file_exists($testsPhar)) {
            return $testsPhar;
        }
        $isWindows = defined('PHP_OS_FAMILY') ? PHP_OS_FAMILY === 'Windows' : strtoupper(substr(PHP_OS, 0, 3)) === 'WIN';
        $cmd = $isWindows ? "where phpunit" : "which phpunit";
        $output = shell_exec($cmd . " 2>&1");
        if ($output && trim($output) && strpos($output, "not found") === false && strpos($output, "Could not find files") === false) {
            $lines = explode("\n", trim($output));
            return trim($lines[0]);
        }
        return null;
    }

    private function runCommand($command)
    {
        if ($this->options["verbose"]) {
            echo "Executing: " . $command . "\n";
        }

        // Change to the project root directory to run the command
        $cwd = getcwd();
        chdir(PROJECT_ROOT);

        passthru($command, $exitCode);

        // Change back to the original directory
        chdir($cwd);

        return $exitCode;
    }

    private function findParaTest()
    {
        $paths = [
            PROJECT_ROOT . "/vendor/bin/paratest",
            PROJECT_ROOT . "/vendor/bin/paratest.bat",
            __DIR__ . "/../vendor/bin/paratest",
            __DIR__ . "/../vendor/bin/paratest.bat",
        ];
        foreach ($paths as $path) {
            if (file_exists($path)) {
                return $path;
            }
        }
        return null;
    }

    private function findPhp()
    {
        $isWindows = defined('PHP_OS_FAMILY') ? PHP_OS_FAMILY === 'Windows' : strtoupper(substr(PHP_OS, 0, 3)) === 'WIN';
        $cmd = $isWindows ? "where php" : "which php";
        $output = shell_exec($cmd . " 2>&1");
        if ($output && trim($output) && strpos($output, "not found") === false && strpos($output, "Could not find files") === false) {
            $lines = explode("\n", trim($output));
            return trim($lines[0]);
        }
        return null;
    }

    private function findAvailableBrowsers()
    {
        $browsers = [];
        $isWindows = defined('PHP_OS_FAMILY') ? PHP_OS_FAMILY === 'Windows' : strtoupper(substr(PHP_OS, 0, 3)) === 'WIN';
        if ($isWindows) {
            $paths = [
                "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe",
                "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe",
                'C:\\Program Files\\Mozilla Firefox\\firefox.exe',
                'C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe',
            ];
        } else {
            $paths = [
                "/usr/bin/google-chrome",
                "/usr/bin/chromium-browser",
                "/usr/bin/firefox",
                "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome",
                "/Applications/Firefox.app/Contents/MacOS/firefox",
            ];
        }
        foreach ($paths as $path) {
            if (file_exists($path)) {
                $browsers[] = $path;
            }
        }
        return $browsers;
    }

    private function printHeader()
    {
        echo "\n";
        echo "üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä\n";
        echo str_repeat("=", 60) . "\n";
        echo "–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: " . date("Y-m-d H:i:s") . "\n";
        echo "PHP –≤–µ—Ä—Å–∏—è: " . PHP_VERSION . "\n";
        echo "–ü—Ä–æ–µ–∫—Ç: " . PROJECT_ROOT . "\n";
        $testTypes = [];
        if ($this->options["unit"]) {
            $testTypes[] = "Unit";
        }
        if ($this->options["integration"]) {
            $testTypes[] = "Integration";
        }
        if ($this->options["js"]) {
            $testTypes[] = "JavaScript";
        }
        echo "–¢–∏–ø—ã —Ç–µ—Å—Ç–æ–≤: " . implode(", ", $testTypes) . "\n";
        if ($this->options["filter"]) {
            echo "–§–∏–ª—å—Ç—Ä: " . $this->options["filter"] . "\n";
        }
        echo str_repeat("=", 60) . "\n\n";
    }

    private function printSummary()
    {
        echo "\n";
        echo "üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢\n";
        echo str_repeat("=", 60) . "\n";
        $totalDuration = microtime(true) - $this->startTime;
        $totalTests = 0;
        $passedTests = 0;
        $failedTests = 0;
        foreach ($this->results as $type => $result) {
            $status = $result["exit_code"] === 0 ? "‚úÖ –ü–†–û–ô–î–ï–ù" : "‚ùå –ü–†–û–í–ê–õ–ï–ù";
            $duration = number_format($result["duration"], 2);
            echo sprintf(
                "%-15s: %s (%ss)\n",
                strtoupper($type),
                $status,
                $duration,
            );
            if ($result["exit_code"] === 0) {
                $passedTests++;
            } else {
                $failedTests++;
            }
            $totalTests++;
        }
        echo str_repeat("-", 60) . "\n";
        echo sprintf(
            "–û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: %ss\n",
            number_format($totalDuration, 2),
        );
        echo sprintf("–í—Å–µ–≥–æ –Ω–∞–±–æ—Ä–æ–≤ —Ç–µ—Å—Ç–æ–≤: %d\n", $totalTests);
        echo sprintf("–ü—Ä–æ–π–¥–µ–Ω–æ: %d\n", $passedTests);
        echo sprintf("–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: %d\n", $failedTests);
        if ($failedTests === 0) {
            echo "\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!\n";
        } else {
            echo "\nüí• –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´!\n";
        }
        echo "\nüìÅ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã:\n";
        $logFiles = [
            "coverage-html/index.html" => "–û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ –∫–æ–¥–∞",
            "results/junit.xml" => "JUnit XML –æ—Ç—á–µ—Ç",
            "results/testdox.html" => "TestDox HTML –æ—Ç—á–µ—Ç",
            "results/php_errors.log" => "–õ–æ–≥ –æ—à–∏–±–æ–∫ PHP",
        ];
        foreach ($logFiles as $file => $description) {
            $fullPath = __DIR__ . "/" . $file;
            if (file_exists($fullPath)) {
                echo "   ‚úì " . $description . ": " . $fullPath . "\n";
            }
        }
        echo str_repeat("=", 60) . "\n";
    }

    private function showHelp()
    {
        echo "\n";
        echo "üõ†Ô∏è  –°–ü–†–ê–í–ö–ê –ü–û –¢–ï–°–¢–û–í–û–ú–£ –†–ê–ù–ù–ï–†–£\n";
        echo str_repeat("=", 60) . "\n";
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: php run_tests.php [–æ–ø—Ü–∏–∏]\n\n";
        echo "–û–ü–¶–ò–ò:\n";
        echo "  --unit-only         –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ unit —Ç–µ—Å—Ç–æ–≤\n";
        echo "  --integration-only  –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ integration —Ç–µ—Å—Ç–æ–≤\n";
        echo "  --js-only           –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ JavaScript —Ç–µ—Å—Ç–æ–≤\n";
        echo "  --with-js           –í–∫–ª—é—á–∏—Ç—å JavaScript —Ç–µ—Å—Ç—ã\n";
        echo "  --coverage           –ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞ (—Ç–æ–ª—å–∫–æ 1 –ø—Ä–æ—Ü–µ—Å—Å, –º–µ–¥–ª–µ–Ω–Ω–µ–µ, –Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)\n";
        echo "                      –ë–µ–∑ --coverage —Ç–µ—Å—Ç—ã –∏–¥—É—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ ParaTest (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 4 –ø—Ä–æ—Ü–µ—Å—Å–∞)\n";
        echo "  --generate-coverage-report-only  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ –∫–æ–¥–∞ –∏–∑ —Ä–∞–Ω–µ–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∏–∑ coverage.php) –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤\n";
        echo "  --verbose, -v       –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥\n";
        echo "  --stop-on-failure   –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ\n";
        echo "  --filter <pattern>  –§–∏–ª—å—Ç—Ä —Ç–µ—Å—Ç–æ–≤ –ø–æ –∏–º–µ–Ω–∏/–ø–∞—Ç—Ç–µ—Ä–Ω—É\n";
        echo "  --help, -h          –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n";
        echo "  --no-parallel         –ó–∞–ø—É—Å–∫–∞—Ç—å —Ç–µ—Å—Ç—ã –±–µ–∑ –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞ (—Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ phpunit)\n";
        echo "  --processes <n>       –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è ParaTest (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 4)\n";
        echo "  --timeout <n>         –¢–∞–π–º–∞—É—Ç –¥–ª—è PHP —Ç–µ—Å—Ç–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 300)\n";
        echo "\n–ü–†–ò–ú–ï–†–´:\n";
        echo "  php run_tests.php                    # –í—Å–µ PHP —Ç–µ—Å—Ç—ã\n";
        echo "  php run_tests.php --with-js          # –í—Å–µ —Ç–µ—Å—Ç—ã –≤–∫–ª—é—á–∞—è JS\n";
        echo "  php run_tests.php --unit-only -v     # –¢–æ–ª—å–∫–æ unit —Ç–µ—Å—Ç—ã, –ø–æ–¥—Ä–æ–±–Ω–æ\n";
        echo "  php run_tests.php --coverage         # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏\n";
        echo "  php run_tests.php --generate-coverage-report-only # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏\n";
        echo "  php run_tests.php --filter CreateGame # –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã CreateGame\n";
        echo str_repeat("=", 60) . "\n";
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–∞–Ω–Ω–µ—Ä–∞
try {
    $runner = new TestRunner($argv);
    $exitCode = $runner->run();
    exit($exitCode);
} catch (Exception $e) {
    echo "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: " . $e->getMessage() . "\n";
    echo "–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:\n" . $e->getTraceAsString() . "\n";
    exit(1);
}
